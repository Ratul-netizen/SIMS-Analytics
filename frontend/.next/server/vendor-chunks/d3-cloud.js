"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/d3-cloud";
exports.ids = ["vendor-chunks/d3-cloud"];
exports.modules = {

/***/ "(ssr)/./node_modules/d3-cloud/index.js":
/*!****************************************!*\
  !*** ./node_modules/d3-cloud/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n// Algorithm due to Jonathan Feinberg, https://s3.amazonaws.com/static.mrfeinberg.com/bv_ch03.pdf\n\nconst dispatch = (__webpack_require__(/*! d3-dispatch */ \"(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/index.js\").dispatch);\nconst RADIANS = Math.PI / 180;\nconst SPIRALS = {\n    archimedean: archimedeanSpiral,\n    rectangular: rectangularSpiral\n};\nconst cw = 1 << 11 >> 5;\nconst ch = 1 << 11;\nmodule.exports = function() {\n    var size = [\n        256,\n        256\n    ], text = cloudText, font = cloudFont, fontSize = cloudFontSize, fontStyle = cloudFontNormal, fontWeight = cloudFontNormal, rotate = cloudRotate, padding = cloudPadding, spiral = archimedeanSpiral, words = [], timeInterval = Infinity, event = dispatch(\"word\", \"end\"), timer = null, random1 = Math.random, cloud = {}, canvas = cloudCanvas;\n    cloud.canvas = function(_) {\n        return arguments.length ? (canvas = functor(_), cloud) : canvas;\n    };\n    cloud.start = function() {\n        var contextAndRatio = getContext(canvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words.length, i = -1, tags = [], data = words.map(function(d, i) {\n            d.text = text.call(this, d, i);\n            d.font = font.call(this, d, i);\n            d.style = fontStyle.call(this, d, i);\n            d.weight = fontWeight.call(this, d, i);\n            d.rotate = rotate.call(this, d, i);\n            d.size = ~~fontSize.call(this, d, i);\n            d.padding = padding.call(this, d, i);\n            return d;\n        }).sort(function(a, b) {\n            return b.size - a.size;\n        });\n        if (timer) clearInterval(timer);\n        timer = setInterval(step, 0);\n        step();\n        return cloud;\n        function step() {\n            var start = Date.now();\n            while(Date.now() - start < timeInterval && ++i < n && timer){\n                var d = data[i];\n                d.x = size[0] * (random1() + .5) >> 1;\n                d.y = size[1] * (random1() + .5) >> 1;\n                cloudSprite(contextAndRatio, d, data, i);\n                if (d.hasText && place(board, d, bounds)) {\n                    tags.push(d);\n                    event.call(\"word\", cloud, d);\n                    if (bounds) cloudBounds(bounds, d);\n                    else bounds = [\n                        {\n                            x: d.x + d.x0,\n                            y: d.y + d.y0\n                        },\n                        {\n                            x: d.x + d.x1,\n                            y: d.y + d.y1\n                        }\n                    ];\n                    // Temporary hack\n                    d.x -= size[0] >> 1;\n                    d.y -= size[1] >> 1;\n                }\n            }\n            if (i >= n) {\n                cloud.stop();\n                event.call(\"end\", cloud, tags, bounds);\n            }\n        }\n    };\n    cloud.stop = function() {\n        if (timer) {\n            clearInterval(timer);\n            timer = null;\n        }\n        for (const d of words){\n            delete d.sprite;\n        }\n        return cloud;\n    };\n    function getContext(canvas) {\n        const context = canvas.getContext(\"2d\", {\n            willReadFrequently: true\n        });\n        canvas.width = canvas.height = 1;\n        const ratio = Math.sqrt(context.getImageData(0, 0, 1, 1).data.length >> 2);\n        canvas.width = (cw << 5) / ratio;\n        canvas.height = ch / ratio;\n        context.fillStyle = context.strokeStyle = \"red\";\n        return {\n            context,\n            ratio\n        };\n    }\n    function place(board, tag, bounds) {\n        var perimeter = [\n            {\n                x: 0,\n                y: 0\n            },\n            {\n                x: size[0],\n                y: size[1]\n            }\n        ], startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s = spiral(size), dt = random1() < .5 ? 1 : -1, t = -dt, dxdy, dx, dy;\n        while(dxdy = s(t += dt)){\n            dx = ~~dxdy[0];\n            dy = ~~dxdy[1];\n            if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n            tag.x = startX + dx;\n            tag.y = startY + dy;\n            if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n            // TODO only check for collisions within current bounds.\n            if (!bounds || collideRects(tag, bounds)) {\n                if (!cloudCollide(tag, board, size[0])) {\n                    var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;\n                    for(var j = 0; j < h; j++){\n                        last = 0;\n                        for(var i = 0; i <= w; i++){\n                            board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n                        }\n                        x += sw;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    cloud.timeInterval = function(_) {\n        return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;\n    };\n    cloud.words = function(_) {\n        return arguments.length ? (words = _, cloud) : words;\n    };\n    cloud.size = function(_) {\n        return arguments.length ? (size = [\n            +_[0],\n            +_[1]\n        ], cloud) : size;\n    };\n    cloud.font = function(_) {\n        return arguments.length ? (font = functor(_), cloud) : font;\n    };\n    cloud.fontStyle = function(_) {\n        return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;\n    };\n    cloud.fontWeight = function(_) {\n        return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;\n    };\n    cloud.rotate = function(_) {\n        return arguments.length ? (rotate = functor(_), cloud) : rotate;\n    };\n    cloud.text = function(_) {\n        return arguments.length ? (text = functor(_), cloud) : text;\n    };\n    cloud.spiral = function(_) {\n        return arguments.length ? (spiral = SPIRALS[_] || _, cloud) : spiral;\n    };\n    cloud.fontSize = function(_) {\n        return arguments.length ? (fontSize = functor(_), cloud) : fontSize;\n    };\n    cloud.padding = function(_) {\n        return arguments.length ? (padding = functor(_), cloud) : padding;\n    };\n    cloud.random = function(_) {\n        return arguments.length ? (random1 = _, cloud) : random1;\n    };\n    cloud.on = function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? cloud : value;\n    };\n    return cloud;\n};\nfunction cloudText(d) {\n    return d.text;\n}\nfunction cloudFont() {\n    return \"serif\";\n}\nfunction cloudFontNormal() {\n    return \"normal\";\n}\nfunction cloudFontSize(d) {\n    return Math.sqrt(d.value);\n}\nfunction cloudRotate() {\n    return (~~(random() * 6) - 3) * 30;\n}\nfunction cloudPadding() {\n    return 1;\n}\n// Fetches a monochrome sprite bitmap for the specified text.\n// Load in batches for speed.\nfunction cloudSprite(contextAndRatio, d, data, di) {\n    if (d.sprite) return;\n    var c = contextAndRatio.context, ratio = contextAndRatio.ratio;\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0, y = 0, maxh = 0, n = data.length;\n    --di;\n    while(++di < n){\n        d = data[di];\n        c.save();\n        c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n        const metrics = c.measureText(d.text);\n        const anchor = -Math.floor(metrics.width / 2);\n        let w = (metrics.width + 1) * ratio;\n        let h = d.size << 1;\n        if (d.rotate) {\n            var sr = Math.sin(d.rotate * RADIANS), cr = Math.cos(d.rotate * RADIANS), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;\n            w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n            h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n        } else {\n            w = w + 0x1f >> 5 << 5;\n        }\n        if (h > maxh) maxh = h;\n        if (x + w >= cw << 5) {\n            x = 0;\n            y += maxh;\n            maxh = 0;\n        }\n        if (y + h >= ch) break;\n        c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n        if (d.rotate) c.rotate(d.rotate * RADIANS);\n        c.fillText(d.text, anchor, 0);\n        if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, anchor, 0);\n        c.restore();\n        d.width = w;\n        d.height = h;\n        d.xoff = x;\n        d.yoff = y;\n        d.x1 = w >> 1;\n        d.y1 = h >> 1;\n        d.x0 = -d.x1;\n        d.y0 = -d.y1;\n        d.hasText = true;\n        x += w;\n    }\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];\n    while(--di >= 0){\n        d = data[di];\n        if (!d.hasText) continue;\n        var w = d.width, w32 = w >> 5, h = d.y1 - d.y0;\n        // Zero the buffer\n        for(var i = 0; i < h * w32; i++)sprite[i] = 0;\n        x = d.xoff;\n        if (x == null) return;\n        y = d.yoff;\n        var seen = 0, seenRow = -1;\n        for(var j = 0; j < h; j++){\n            for(var i = 0; i < w; i++){\n                var k = w32 * j + (i >> 5), m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n                sprite[k] |= m;\n                seen |= m;\n            }\n            if (seen) seenRow = j;\n            else {\n                d.y0++;\n                h--;\n                j--;\n                y++;\n            }\n        }\n        d.y1 = d.y0 + seenRow;\n        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n}\n// Use mask-based collision detection.\nfunction cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;\n    for(var j = 0; j < h; j++){\n        last = 0;\n        for(var i = 0; i <= w; i++){\n            if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;\n        }\n        x += sw;\n    }\n    return false;\n}\nfunction cloudBounds(bounds, d) {\n    var b0 = bounds[0], b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n}\nfunction collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n}\nfunction archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function(t) {\n        return [\n            e * (t *= .1) * Math.cos(t),\n            t * Math.sin(t)\n        ];\n    };\n}\nfunction rectangularSpiral(size) {\n    var dy = 4, dx = dy * size[0] / size[1], x = 0, y = 0;\n    return function(t) {\n        var sign = t < 0 ? -1 : 1;\n        // See triangular numbers: T_n = n * (n + 1) / 2.\n        switch(Math.sqrt(1 + 4 * sign * t) - sign & 3){\n            case 0:\n                x += dx;\n                break;\n            case 1:\n                y += dy;\n                break;\n            case 2:\n                x -= dx;\n                break;\n            default:\n                y -= dy;\n                break;\n        }\n        return [\n            x,\n            y\n        ];\n    };\n}\n// TODO reuse arrays?\nfunction zeroArray(n) {\n    var a = [], i = -1;\n    while(++i < n)a[i] = 0;\n    return a;\n}\nfunction cloudCanvas() {\n    return document.createElement(\"canvas\");\n}\nfunction functor(d) {\n    return typeof d === \"function\" ? d : function() {\n        return d;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vbm9kZV9tb2R1bGVzL2QzLWNsb3VkL2luZGV4LmpzPzY4NmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV29yZCBjbG91ZCBsYXlvdXQgYnkgSmFzb24gRGF2aWVzLCBodHRwczovL3d3dy5qYXNvbmRhdmllcy5jb20vd29yZGNsb3VkL1xuLy8gQWxnb3JpdGhtIGR1ZSB0byBKb25hdGhhbiBGZWluYmVyZywgaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3N0YXRpYy5tcmZlaW5iZXJnLmNvbS9idl9jaDAzLnBkZlxuXG5jb25zdCBkaXNwYXRjaCA9IHJlcXVpcmUoXCJkMy1kaXNwYXRjaFwiKS5kaXNwYXRjaDtcblxuY29uc3QgUkFESUFOUyA9IE1hdGguUEkgLyAxODA7XG5cbmNvbnN0IFNQSVJBTFMgPSB7XG4gIGFyY2hpbWVkZWFuOiBhcmNoaW1lZGVhblNwaXJhbCxcbiAgcmVjdGFuZ3VsYXI6IHJlY3Rhbmd1bGFyU3BpcmFsXG59O1xuXG5jb25zdCBjdyA9IDEgPDwgMTEgPj4gNTtcbmNvbnN0IGNoID0gMSA8PCAxMTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSBbMjU2LCAyNTZdLFxuICAgICAgdGV4dCA9IGNsb3VkVGV4dCxcbiAgICAgIGZvbnQgPSBjbG91ZEZvbnQsXG4gICAgICBmb250U2l6ZSA9IGNsb3VkRm9udFNpemUsXG4gICAgICBmb250U3R5bGUgPSBjbG91ZEZvbnROb3JtYWwsXG4gICAgICBmb250V2VpZ2h0ID0gY2xvdWRGb250Tm9ybWFsLFxuICAgICAgcm90YXRlID0gY2xvdWRSb3RhdGUsXG4gICAgICBwYWRkaW5nID0gY2xvdWRQYWRkaW5nLFxuICAgICAgc3BpcmFsID0gYXJjaGltZWRlYW5TcGlyYWwsXG4gICAgICB3b3JkcyA9IFtdLFxuICAgICAgdGltZUludGVydmFsID0gSW5maW5pdHksXG4gICAgICBldmVudCA9IGRpc3BhdGNoKFwid29yZFwiLCBcImVuZFwiKSxcbiAgICAgIHRpbWVyID0gbnVsbCxcbiAgICAgIHJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgY2xvdWQgPSB7fSxcbiAgICAgIGNhbnZhcyA9IGNsb3VkQ2FudmFzO1xuXG4gIGNsb3VkLmNhbnZhcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjYW52YXMgPSBmdW5jdG9yKF8pLCBjbG91ZCkgOiBjYW52YXM7XG4gIH07XG5cbiAgY2xvdWQuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29udGV4dEFuZFJhdGlvID0gZ2V0Q29udGV4dChjYW52YXMoKSksXG4gICAgICAgIGJvYXJkID0gemVyb0FycmF5KChzaXplWzBdID4+IDUpICogc2l6ZVsxXSksXG4gICAgICAgIGJvdW5kcyA9IG51bGwsXG4gICAgICAgIG4gPSB3b3Jkcy5sZW5ndGgsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgdGFncyA9IFtdLFxuICAgICAgICBkYXRhID0gd29yZHMubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICBkLnRleHQgPSB0ZXh0LmNhbGwodGhpcywgZCwgaSk7XG4gICAgICAgICAgZC5mb250ID0gZm9udC5jYWxsKHRoaXMsIGQsIGkpO1xuICAgICAgICAgIGQuc3R5bGUgPSBmb250U3R5bGUuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICBkLndlaWdodCA9IGZvbnRXZWlnaHQuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICBkLnJvdGF0ZSA9IHJvdGF0ZS5jYWxsKHRoaXMsIGQsIGkpO1xuICAgICAgICAgIGQuc2l6ZSA9IH5+Zm9udFNpemUuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgICAgICBkLnBhZGRpbmcgPSBwYWRkaW5nLmNhbGwodGhpcywgZCwgaSk7XG4gICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYi5zaXplIC0gYS5zaXplOyB9KTtcblxuICAgIGlmICh0aW1lcikgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgdGltZXIgPSBzZXRJbnRlcnZhbChzdGVwLCAwKTtcbiAgICBzdGVwKCk7XG5cbiAgICByZXR1cm4gY2xvdWQ7XG5cbiAgICBmdW5jdGlvbiBzdGVwKCkge1xuICAgICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnQgPCB0aW1lSW50ZXJ2YWwgJiYgKytpIDwgbiAmJiB0aW1lcikge1xuICAgICAgICB2YXIgZCA9IGRhdGFbaV07XG4gICAgICAgIGQueCA9IChzaXplWzBdICogKHJhbmRvbSgpICsgLjUpKSA+PiAxO1xuICAgICAgICBkLnkgPSAoc2l6ZVsxXSAqIChyYW5kb20oKSArIC41KSkgPj4gMTtcbiAgICAgICAgY2xvdWRTcHJpdGUoY29udGV4dEFuZFJhdGlvLCBkLCBkYXRhLCBpKTtcbiAgICAgICAgaWYgKGQuaGFzVGV4dCAmJiBwbGFjZShib2FyZCwgZCwgYm91bmRzKSkge1xuICAgICAgICAgIHRhZ3MucHVzaChkKTtcbiAgICAgICAgICBldmVudC5jYWxsKFwid29yZFwiLCBjbG91ZCwgZCk7XG4gICAgICAgICAgaWYgKGJvdW5kcykgY2xvdWRCb3VuZHMoYm91bmRzLCBkKTtcbiAgICAgICAgICBlbHNlIGJvdW5kcyA9IFt7eDogZC54ICsgZC54MCwgeTogZC55ICsgZC55MH0sIHt4OiBkLnggKyBkLngxLCB5OiBkLnkgKyBkLnkxfV07XG4gICAgICAgICAgLy8gVGVtcG9yYXJ5IGhhY2tcbiAgICAgICAgICBkLnggLT0gc2l6ZVswXSA+PiAxO1xuICAgICAgICAgIGQueSAtPSBzaXplWzFdID4+IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID49IG4pIHtcbiAgICAgICAgY2xvdWQuc3RvcCgpO1xuICAgICAgICBldmVudC5jYWxsKFwiZW5kXCIsIGNsb3VkLCB0YWdzLCBib3VuZHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsb3VkLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGQgb2Ygd29yZHMpIHtcbiAgICAgIGRlbGV0ZSBkLnNwcml0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb3VkO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldENvbnRleHQoY2FudmFzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwge3dpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZX0pO1xuXG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLmhlaWdodCA9IDE7XG4gICAgY29uc3QgcmF0aW8gPSBNYXRoLnNxcnQoY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YS5sZW5ndGggPj4gMik7XG4gICAgY2FudmFzLndpZHRoID0gKGN3IDw8IDUpIC8gcmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGNoIC8gcmF0aW87XG5cbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuXG4gICAgcmV0dXJuIHtjb250ZXh0LCByYXRpb307XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZShib2FyZCwgdGFnLCBib3VuZHMpIHtcbiAgICB2YXIgcGVyaW1ldGVyID0gW3t4OiAwLCB5OiAwfSwge3g6IHNpemVbMF0sIHk6IHNpemVbMV19XSxcbiAgICAgICAgc3RhcnRYID0gdGFnLngsXG4gICAgICAgIHN0YXJ0WSA9IHRhZy55LFxuICAgICAgICBtYXhEZWx0YSA9IE1hdGguc3FydChzaXplWzBdICogc2l6ZVswXSArIHNpemVbMV0gKiBzaXplWzFdKSxcbiAgICAgICAgcyA9IHNwaXJhbChzaXplKSxcbiAgICAgICAgZHQgPSByYW5kb20oKSA8IC41ID8gMSA6IC0xLFxuICAgICAgICB0ID0gLWR0LFxuICAgICAgICBkeGR5LFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICB3aGlsZSAoZHhkeSA9IHModCArPSBkdCkpIHtcbiAgICAgIGR4ID0gfn5keGR5WzBdO1xuICAgICAgZHkgPSB+fmR4ZHlbMV07XG5cbiAgICAgIGlmIChNYXRoLm1pbihNYXRoLmFicyhkeCksIE1hdGguYWJzKGR5KSkgPj0gbWF4RGVsdGEpIGJyZWFrO1xuXG4gICAgICB0YWcueCA9IHN0YXJ0WCArIGR4O1xuICAgICAgdGFnLnkgPSBzdGFydFkgKyBkeTtcblxuICAgICAgaWYgKHRhZy54ICsgdGFnLngwIDwgMCB8fCB0YWcueSArIHRhZy55MCA8IDAgfHxcbiAgICAgICAgICB0YWcueCArIHRhZy54MSA+IHNpemVbMF0gfHwgdGFnLnkgKyB0YWcueTEgPiBzaXplWzFdKSBjb250aW51ZTtcbiAgICAgIC8vIFRPRE8gb25seSBjaGVjayBmb3IgY29sbGlzaW9ucyB3aXRoaW4gY3VycmVudCBib3VuZHMuXG4gICAgICBpZiAoIWJvdW5kcyB8fCBjb2xsaWRlUmVjdHModGFnLCBib3VuZHMpKSB7XG4gICAgICAgIGlmICghY2xvdWRDb2xsaWRlKHRhZywgYm9hcmQsIHNpemVbMF0pKSB7XG4gICAgICAgICAgdmFyIHNwcml0ZSA9IHRhZy5zcHJpdGUsXG4gICAgICAgICAgICAgIHcgPSB0YWcud2lkdGggPj4gNSxcbiAgICAgICAgICAgICAgc3cgPSBzaXplWzBdID4+IDUsXG4gICAgICAgICAgICAgIGx4ID0gdGFnLnggLSAodyA8PCA0KSxcbiAgICAgICAgICAgICAgc3ggPSBseCAmIDB4N2YsXG4gICAgICAgICAgICAgIG1zeCA9IDMyIC0gc3gsXG4gICAgICAgICAgICAgIGggPSB0YWcueTEgLSB0YWcueTAsXG4gICAgICAgICAgICAgIHggPSAodGFnLnkgKyB0YWcueTApICogc3cgKyAobHggPj4gNSksXG4gICAgICAgICAgICAgIGxhc3Q7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgICAgIGxhc3QgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gdzsgaSsrKSB7XG4gICAgICAgICAgICAgIGJvYXJkW3ggKyBpXSB8PSAobGFzdCA8PCBtc3gpIHwgKGkgPCB3ID8gKGxhc3QgPSBzcHJpdGVbaiAqIHcgKyBpXSkgPj4+IHN4IDogMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4ICs9IHN3O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjbG91ZC50aW1lSW50ZXJ2YWwgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGltZUludGVydmFsID0gXyA9PSBudWxsID8gSW5maW5pdHkgOiBfLCBjbG91ZCkgOiB0aW1lSW50ZXJ2YWw7XG4gIH07XG5cbiAgY2xvdWQud29yZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod29yZHMgPSBfLCBjbG91ZCkgOiB3b3JkcztcbiAgfTtcblxuICBjbG91ZC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNpemUgPSBbK19bMF0sICtfWzFdXSwgY2xvdWQpIDogc2l6ZTtcbiAgfTtcblxuICBjbG91ZC5mb250ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZvbnQgPSBmdW5jdG9yKF8pLCBjbG91ZCkgOiBmb250O1xuICB9O1xuXG4gIGNsb3VkLmZvbnRTdHlsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmb250U3R5bGUgPSBmdW5jdG9yKF8pLCBjbG91ZCkgOiBmb250U3R5bGU7XG4gIH07XG5cbiAgY2xvdWQuZm9udFdlaWdodCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmb250V2VpZ2h0ID0gZnVuY3RvcihfKSwgY2xvdWQpIDogZm9udFdlaWdodDtcbiAgfTtcblxuICBjbG91ZC5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm90YXRlID0gZnVuY3RvcihfKSwgY2xvdWQpIDogcm90YXRlO1xuICB9O1xuXG4gIGNsb3VkLnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGV4dCA9IGZ1bmN0b3IoXyksIGNsb3VkKSA6IHRleHQ7XG4gIH07XG5cbiAgY2xvdWQuc3BpcmFsID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNwaXJhbCA9IFNQSVJBTFNbX10gfHwgXywgY2xvdWQpIDogc3BpcmFsO1xuICB9O1xuXG4gIGNsb3VkLmZvbnRTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZvbnRTaXplID0gZnVuY3RvcihfKSwgY2xvdWQpIDogZm9udFNpemU7XG4gIH07XG5cbiAgY2xvdWQucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gZnVuY3RvcihfKSwgY2xvdWQpIDogcGFkZGluZztcbiAgfTtcblxuICBjbG91ZC5yYW5kb20gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZG9tID0gXywgY2xvdWQpIDogcmFuZG9tO1xuICB9O1xuXG4gIGNsb3VkLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gZXZlbnQub24uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBldmVudCA/IGNsb3VkIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGNsb3VkO1xufTtcblxuZnVuY3Rpb24gY2xvdWRUZXh0KGQpIHtcbiAgcmV0dXJuIGQudGV4dDtcbn1cblxuZnVuY3Rpb24gY2xvdWRGb250KCkge1xuICByZXR1cm4gXCJzZXJpZlwiO1xufVxuXG5mdW5jdGlvbiBjbG91ZEZvbnROb3JtYWwoKSB7XG4gIHJldHVybiBcIm5vcm1hbFwiO1xufVxuXG5mdW5jdGlvbiBjbG91ZEZvbnRTaXplKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gY2xvdWRSb3RhdGUoKSB7XG4gIHJldHVybiAofn4ocmFuZG9tKCkgKiA2KSAtIDMpICogMzA7XG59XG5cbmZ1bmN0aW9uIGNsb3VkUGFkZGluZygpIHtcbiAgcmV0dXJuIDE7XG59XG5cbi8vIEZldGNoZXMgYSBtb25vY2hyb21lIHNwcml0ZSBiaXRtYXAgZm9yIHRoZSBzcGVjaWZpZWQgdGV4dC5cbi8vIExvYWQgaW4gYmF0Y2hlcyBmb3Igc3BlZWQuXG5mdW5jdGlvbiBjbG91ZFNwcml0ZShjb250ZXh0QW5kUmF0aW8sIGQsIGRhdGEsIGRpKSB7XG4gIGlmIChkLnNwcml0ZSkgcmV0dXJuO1xuICB2YXIgYyA9IGNvbnRleHRBbmRSYXRpby5jb250ZXh0LFxuICAgICAgcmF0aW8gPSBjb250ZXh0QW5kUmF0aW8ucmF0aW87XG5cbiAgYy5jbGVhclJlY3QoMCwgMCwgKGN3IDw8IDUpIC8gcmF0aW8sIGNoIC8gcmF0aW8pO1xuICB2YXIgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIG1heGggPSAwLFxuICAgICAgbiA9IGRhdGEubGVuZ3RoO1xuICAtLWRpO1xuICB3aGlsZSAoKytkaSA8IG4pIHtcbiAgICBkID0gZGF0YVtkaV07XG4gICAgYy5zYXZlKCk7XG4gICAgYy5mb250ID0gZC5zdHlsZSArIFwiIFwiICsgZC53ZWlnaHQgKyBcIiBcIiArIH5+KChkLnNpemUgKyAxKSAvIHJhdGlvKSArIFwicHggXCIgKyBkLmZvbnQ7XG4gICAgY29uc3QgbWV0cmljcyA9IGMubWVhc3VyZVRleHQoZC50ZXh0KTtcbiAgICBjb25zdCBhbmNob3IgPSAtTWF0aC5mbG9vcihtZXRyaWNzLndpZHRoIC8gMik7XG4gICAgbGV0IHcgPSAobWV0cmljcy53aWR0aCArIDEpICogcmF0aW87XG4gICAgbGV0IGggPSBkLnNpemUgPDwgMTtcbiAgICBpZiAoZC5yb3RhdGUpIHtcbiAgICAgIHZhciBzciA9IE1hdGguc2luKGQucm90YXRlICogUkFESUFOUyksXG4gICAgICAgICAgY3IgPSBNYXRoLmNvcyhkLnJvdGF0ZSAqIFJBRElBTlMpLFxuICAgICAgICAgIHdjciA9IHcgKiBjcixcbiAgICAgICAgICB3c3IgPSB3ICogc3IsXG4gICAgICAgICAgaGNyID0gaCAqIGNyLFxuICAgICAgICAgIGhzciA9IGggKiBzcjtcbiAgICAgIHcgPSAoTWF0aC5tYXgoTWF0aC5hYnMod2NyICsgaHNyKSwgTWF0aC5hYnMod2NyIC0gaHNyKSkgKyAweDFmKSA+PiA1IDw8IDU7XG4gICAgICBoID0gfn5NYXRoLm1heChNYXRoLmFicyh3c3IgKyBoY3IpLCBNYXRoLmFicyh3c3IgLSBoY3IpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdyA9ICh3ICsgMHgxZikgPj4gNSA8PCA1O1xuICAgIH1cbiAgICBpZiAoaCA+IG1heGgpIG1heGggPSBoO1xuICAgIGlmICh4ICsgdyA+PSAoY3cgPDwgNSkpIHtcbiAgICAgIHggPSAwO1xuICAgICAgeSArPSBtYXhoO1xuICAgICAgbWF4aCA9IDA7XG4gICAgfVxuICAgIGlmICh5ICsgaCA+PSBjaCkgYnJlYWs7XG4gICAgYy50cmFuc2xhdGUoKHggKyAodyA+PiAxKSkgLyByYXRpbywgKHkgKyAoaCA+PiAxKSkgLyByYXRpbyk7XG4gICAgaWYgKGQucm90YXRlKSBjLnJvdGF0ZShkLnJvdGF0ZSAqIFJBRElBTlMpO1xuICAgIGMuZmlsbFRleHQoZC50ZXh0LCBhbmNob3IsIDApO1xuICAgIGlmIChkLnBhZGRpbmcpIGMubGluZVdpZHRoID0gMiAqIGQucGFkZGluZywgYy5zdHJva2VUZXh0KGQudGV4dCwgYW5jaG9yLCAwKTtcbiAgICBjLnJlc3RvcmUoKTtcbiAgICBkLndpZHRoID0gdztcbiAgICBkLmhlaWdodCA9IGg7XG4gICAgZC54b2ZmID0geDtcbiAgICBkLnlvZmYgPSB5O1xuICAgIGQueDEgPSB3ID4+IDE7XG4gICAgZC55MSA9IGggPj4gMTtcbiAgICBkLngwID0gLWQueDE7XG4gICAgZC55MCA9IC1kLnkxO1xuICAgIGQuaGFzVGV4dCA9IHRydWU7XG4gICAgeCArPSB3O1xuICB9XG4gIHZhciBwaXhlbHMgPSBjLmdldEltYWdlRGF0YSgwLCAwLCAoY3cgPDwgNSkgLyByYXRpbywgY2ggLyByYXRpbykuZGF0YSxcbiAgICAgIHNwcml0ZSA9IFtdO1xuICB3aGlsZSAoLS1kaSA+PSAwKSB7XG4gICAgZCA9IGRhdGFbZGldO1xuICAgIGlmICghZC5oYXNUZXh0KSBjb250aW51ZTtcbiAgICB2YXIgdyA9IGQud2lkdGgsXG4gICAgICAgIHczMiA9IHcgPj4gNSxcbiAgICAgICAgaCA9IGQueTEgLSBkLnkwO1xuICAgIC8vIFplcm8gdGhlIGJ1ZmZlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaCAqIHczMjsgaSsrKSBzcHJpdGVbaV0gPSAwO1xuICAgIHggPSBkLnhvZmY7XG4gICAgaWYgKHggPT0gbnVsbCkgcmV0dXJuO1xuICAgIHkgPSBkLnlvZmY7XG4gICAgdmFyIHNlZW4gPSAwLFxuICAgICAgICBzZWVuUm93ID0gLTE7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdzsgaSsrKSB7XG4gICAgICAgIHZhciBrID0gdzMyICogaiArIChpID4+IDUpLFxuICAgICAgICAgICAgbSA9IHBpeGVsc1soKHkgKyBqKSAqIChjdyA8PCA1KSArICh4ICsgaSkpIDw8IDJdID8gMSA8PCAoMzEgLSAoaSAlIDMyKSkgOiAwO1xuICAgICAgICBzcHJpdGVba10gfD0gbTtcbiAgICAgICAgc2VlbiB8PSBtO1xuICAgICAgfVxuICAgICAgaWYgKHNlZW4pIHNlZW5Sb3cgPSBqO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGQueTArKztcbiAgICAgICAgaC0tO1xuICAgICAgICBqLS07XG4gICAgICAgIHkrKztcbiAgICAgIH1cbiAgICB9XG4gICAgZC55MSA9IGQueTAgKyBzZWVuUm93O1xuICAgIGQuc3ByaXRlID0gc3ByaXRlLnNsaWNlKDAsIChkLnkxIC0gZC55MCkgKiB3MzIpO1xuICB9XG59XG5cbi8vIFVzZSBtYXNrLWJhc2VkIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG5mdW5jdGlvbiBjbG91ZENvbGxpZGUodGFnLCBib2FyZCwgc3cpIHtcbiAgc3cgPj49IDU7XG4gIHZhciBzcHJpdGUgPSB0YWcuc3ByaXRlLFxuICAgICAgdyA9IHRhZy53aWR0aCA+PiA1LFxuICAgICAgbHggPSB0YWcueCAtICh3IDw8IDQpLFxuICAgICAgc3ggPSBseCAmIDB4N2YsXG4gICAgICBtc3ggPSAzMiAtIHN4LFxuICAgICAgaCA9IHRhZy55MSAtIHRhZy55MCxcbiAgICAgIHggPSAodGFnLnkgKyB0YWcueTApICogc3cgKyAobHggPj4gNSksXG4gICAgICBsYXN0O1xuICBmb3IgKHZhciBqID0gMDsgaiA8IGg7IGorKykge1xuICAgIGxhc3QgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHc7IGkrKykge1xuICAgICAgaWYgKCgobGFzdCA8PCBtc3gpIHwgKGkgPCB3ID8gKGxhc3QgPSBzcHJpdGVbaiAqIHcgKyBpXSkgPj4+IHN4IDogMCkpXG4gICAgICAgICAgJiBib2FyZFt4ICsgaV0pIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB4ICs9IHN3O1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY2xvdWRCb3VuZHMoYm91bmRzLCBkKSB7XG4gIHZhciBiMCA9IGJvdW5kc1swXSxcbiAgICAgIGIxID0gYm91bmRzWzFdO1xuICBpZiAoZC54ICsgZC54MCA8IGIwLngpIGIwLnggPSBkLnggKyBkLngwO1xuICBpZiAoZC55ICsgZC55MCA8IGIwLnkpIGIwLnkgPSBkLnkgKyBkLnkwO1xuICBpZiAoZC54ICsgZC54MSA+IGIxLngpIGIxLnggPSBkLnggKyBkLngxO1xuICBpZiAoZC55ICsgZC55MSA+IGIxLnkpIGIxLnkgPSBkLnkgKyBkLnkxO1xufVxuXG5mdW5jdGlvbiBjb2xsaWRlUmVjdHMoYSwgYikge1xuICByZXR1cm4gYS54ICsgYS54MSA+IGJbMF0ueCAmJiBhLnggKyBhLngwIDwgYlsxXS54ICYmIGEueSArIGEueTEgPiBiWzBdLnkgJiYgYS55ICsgYS55MCA8IGJbMV0ueTtcbn1cblxuZnVuY3Rpb24gYXJjaGltZWRlYW5TcGlyYWwoc2l6ZSkge1xuICB2YXIgZSA9IHNpemVbMF0gLyBzaXplWzFdO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBbZSAqICh0ICo9IC4xKSAqIE1hdGguY29zKHQpLCB0ICogTWF0aC5zaW4odCldO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWN0YW5ndWxhclNwaXJhbChzaXplKSB7XG4gIHZhciBkeSA9IDQsXG4gICAgICBkeCA9IGR5ICogc2l6ZVswXSAvIHNpemVbMV0sXG4gICAgICB4ID0gMCxcbiAgICAgIHkgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBzaWduID0gdCA8IDAgPyAtMSA6IDE7XG4gICAgLy8gU2VlIHRyaWFuZ3VsYXIgbnVtYmVyczogVF9uID0gbiAqIChuICsgMSkgLyAyLlxuICAgIHN3aXRjaCAoKE1hdGguc3FydCgxICsgNCAqIHNpZ24gKiB0KSAtIHNpZ24pICYgMykge1xuICAgICAgY2FzZSAwOiAgeCArPSBkeDsgYnJlYWs7XG4gICAgICBjYXNlIDE6ICB5ICs9IGR5OyBicmVhaztcbiAgICAgIGNhc2UgMjogIHggLT0gZHg7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogeSAtPSBkeTsgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBbeCwgeV07XG4gIH07XG59XG5cbi8vIFRPRE8gcmV1c2UgYXJyYXlzP1xuZnVuY3Rpb24gemVyb0FycmF5KG4pIHtcbiAgdmFyIGEgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IG4pIGFbaV0gPSAwO1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gY2xvdWRDYW52YXMoKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xufVxuXG5mdW5jdGlvbiBmdW5jdG9yKGQpIHtcbiAgcmV0dXJuIHR5cGVvZiBkID09PSBcImZ1bmN0aW9uXCIgPyBkIDogZnVuY3Rpb24oKSB7IHJldHVybiBkOyB9O1xufVxuIl0sIm5hbWVzIjpbImRpc3BhdGNoIiwicmVxdWlyZSIsIlJBRElBTlMiLCJNYXRoIiwiUEkiLCJTUElSQUxTIiwiYXJjaGltZWRlYW4iLCJhcmNoaW1lZGVhblNwaXJhbCIsInJlY3Rhbmd1bGFyIiwicmVjdGFuZ3VsYXJTcGlyYWwiLCJjdyIsImNoIiwibW9kdWxlIiwiZXhwb3J0cyIsInNpemUiLCJ0ZXh0IiwiY2xvdWRUZXh0IiwiZm9udCIsImNsb3VkRm9udCIsImZvbnRTaXplIiwiY2xvdWRGb250U2l6ZSIsImZvbnRTdHlsZSIsImNsb3VkRm9udE5vcm1hbCIsImZvbnRXZWlnaHQiLCJyb3RhdGUiLCJjbG91ZFJvdGF0ZSIsInBhZGRpbmciLCJjbG91ZFBhZGRpbmciLCJzcGlyYWwiLCJ3b3JkcyIsInRpbWVJbnRlcnZhbCIsIkluZmluaXR5IiwiZXZlbnQiLCJ0aW1lciIsInJhbmRvbSIsImNsb3VkIiwiY2FudmFzIiwiY2xvdWRDYW52YXMiLCJfIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZnVuY3RvciIsInN0YXJ0IiwiY29udGV4dEFuZFJhdGlvIiwiZ2V0Q29udGV4dCIsImJvYXJkIiwiemVyb0FycmF5IiwiYm91bmRzIiwibiIsImkiLCJ0YWdzIiwiZGF0YSIsIm1hcCIsImQiLCJjYWxsIiwic3R5bGUiLCJ3ZWlnaHQiLCJzb3J0IiwiYSIsImIiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJzdGVwIiwiRGF0ZSIsIm5vdyIsIngiLCJ5IiwiY2xvdWRTcHJpdGUiLCJoYXNUZXh0IiwicGxhY2UiLCJwdXNoIiwiY2xvdWRCb3VuZHMiLCJ4MCIsInkwIiwieDEiLCJ5MSIsInN0b3AiLCJzcHJpdGUiLCJjb250ZXh0Iiwid2lsbFJlYWRGcmVxdWVudGx5Iiwid2lkdGgiLCJoZWlnaHQiLCJyYXRpbyIsInNxcnQiLCJnZXRJbWFnZURhdGEiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsInRhZyIsInBlcmltZXRlciIsInN0YXJ0WCIsInN0YXJ0WSIsIm1heERlbHRhIiwicyIsImR0IiwidCIsImR4ZHkiLCJkeCIsImR5IiwibWluIiwiYWJzIiwiY29sbGlkZVJlY3RzIiwiY2xvdWRDb2xsaWRlIiwidyIsInN3IiwibHgiLCJzeCIsIm1zeCIsImgiLCJsYXN0IiwiaiIsIm9uIiwidmFsdWUiLCJhcHBseSIsImRpIiwiYyIsImNsZWFyUmVjdCIsIm1heGgiLCJzYXZlIiwibWV0cmljcyIsIm1lYXN1cmVUZXh0IiwiYW5jaG9yIiwiZmxvb3IiLCJzciIsInNpbiIsImNyIiwiY29zIiwid2NyIiwid3NyIiwiaGNyIiwiaHNyIiwibWF4IiwidHJhbnNsYXRlIiwiZmlsbFRleHQiLCJsaW5lV2lkdGgiLCJzdHJva2VUZXh0IiwicmVzdG9yZSIsInhvZmYiLCJ5b2ZmIiwicGl4ZWxzIiwidzMyIiwic2VlbiIsInNlZW5Sb3ciLCJrIiwibSIsInNsaWNlIiwiYjAiLCJiMSIsImUiLCJzaWduIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-cloud/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/dispatch.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-cloud/node_modules/d3-dispatch/src/dispatch.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar noop = {\n    value: function() {}\n};\nfunction dispatch() {\n    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){\n        if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n        _[t] = [];\n    }\n    return new Dispatch(_);\n}\nfunction Dispatch(_) {\n    this._ = _;\n}\nfunction parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n        var name = \"\", i = t.indexOf(\".\");\n        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n        if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n        return {\n            type: t,\n            name: name\n        };\n    });\n}\nDispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n        var _ = this._, T = parseTypenames(typename + \"\", _), t, i = -1, n = T.length;\n        // If no callback was specified, return the callback of the given type and name.\n        if (arguments.length < 2) {\n            while(++i < n)if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n            return;\n        }\n        // If a type was specified, set the callback for the given type and name.\n        // Otherwise, if a null callback was specified, remove callbacks of the given name.\n        if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        while(++i < n){\n            if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n            else if (callback == null) for(t in _)_[t] = set(_[t], typename.name, null);\n        }\n        return this;\n    },\n    copy: function() {\n        var copy = {}, _ = this._;\n        for(var t in _)copy[t] = _[t].slice();\n        return new Dispatch(copy);\n    },\n    call: function(type, that) {\n        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    }\n};\nfunction get(type, name) {\n    for(var i = 0, n = type.length, c; i < n; ++i){\n        if ((c = type[i]).name === name) {\n            return c.value;\n        }\n    }\n}\nfunction set(type, name, callback) {\n    for(var i = 0, n = type.length; i < n; ++i){\n        if (type[i].name === name) {\n            type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n            break;\n        }\n    }\n    if (callback != null) type.push({\n        name: name,\n        value: callback\n    });\n    return type;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dispatch);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZDMtY2xvdWQvbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsT0FBTztJQUFDQyxPQUFPLFlBQVk7QUFBQztBQUVoQyxTQUFTQztJQUNQLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVDLElBQUksQ0FBQyxHQUFHQyxHQUFHTCxJQUFJQyxHQUFHLEVBQUVELEVBQUc7UUFDM0QsSUFBSSxDQUFFSyxDQUFBQSxJQUFJSCxTQUFTLENBQUNGLEVBQUUsR0FBRyxFQUFDLEtBQU9LLEtBQUtELEtBQU0sUUFBUUUsSUFBSSxDQUFDRCxJQUFJLE1BQU0sSUFBSUUsTUFBTSxtQkFBbUJGO1FBQ2hHRCxDQUFDLENBQUNDLEVBQUUsR0FBRyxFQUFFO0lBQ1g7SUFDQSxPQUFPLElBQUlHLFNBQVNKO0FBQ3RCO0FBRUEsU0FBU0ksU0FBU0osQ0FBQztJQUNqQixJQUFJLENBQUNBLENBQUMsR0FBR0E7QUFDWDtBQUVBLFNBQVNLLGVBQWVDLFNBQVMsRUFBRUMsS0FBSztJQUN0QyxPQUFPRCxVQUFVRSxJQUFJLEdBQUdDLEtBQUssQ0FBQyxTQUFTQyxHQUFHLENBQUMsU0FBU1QsQ0FBQztRQUNuRCxJQUFJVSxPQUFPLElBQUlmLElBQUlLLEVBQUVXLE9BQU8sQ0FBQztRQUM3QixJQUFJaEIsS0FBSyxHQUFHZSxPQUFPVixFQUFFWSxLQUFLLENBQUNqQixJQUFJLElBQUlLLElBQUlBLEVBQUVZLEtBQUssQ0FBQyxHQUFHakI7UUFDbEQsSUFBSUssS0FBSyxDQUFDTSxNQUFNTyxjQUFjLENBQUNiLElBQUksTUFBTSxJQUFJRSxNQUFNLG1CQUFtQkY7UUFDdEUsT0FBTztZQUFDYyxNQUFNZDtZQUFHVSxNQUFNQTtRQUFJO0lBQzdCO0FBQ0Y7QUFFQVAsU0FBU1ksU0FBUyxHQUFHckIsU0FBU3FCLFNBQVMsR0FBRztJQUN4Q0MsYUFBYWI7SUFD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a0MsSUFBSWYsSUFBSSxDQUFDbkIsRUFBRSxFQUFFZSxJQUFJLEtBQUtBLE1BQU07WUFDL0IsT0FBT21CLEVBQUVwQyxLQUFLO1FBQ2hCO0lBQ0Y7QUFDRjtBQUVBLFNBQVM2QixJQUFJUixJQUFJLEVBQUVKLElBQUksRUFBRVMsUUFBUTtJQUMvQixJQUFLLElBQUl4QixJQUFJLEdBQUdDLElBQUlrQixLQUFLaEIsTUFBTSxFQUFFSCxJQUFJQyxHQUFHLEVBQUVELEVBQUc7UUFDM0MsSUFBSW1CLElBQUksQ0FBQ25CLEVBQUUsQ0FBQ2UsSUFBSSxLQUFLQSxNQUFNO1lBQ3pCSSxJQUFJLENBQUNuQixFQUFFLEdBQUdILE1BQU1zQixPQUFPQSxLQUFLRixLQUFLLENBQUMsR0FBR2pCLEdBQUdtQyxNQUFNLENBQUNoQixLQUFLRixLQUFLLENBQUNqQixJQUFJO1lBQzlEO1FBQ0Y7SUFDRjtJQUNBLElBQUl3QixZQUFZLE1BQU1MLEtBQUtpQixJQUFJLENBQUM7UUFBQ3JCLE1BQU1BO1FBQU1qQixPQUFPMEI7SUFBUTtJQUM1RCxPQUFPTDtBQUNUO0FBRUEsaUVBQWVwQixRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2ltcy1hbmFseXRpY3MtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2QzLWNsb3VkL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanM/MWNkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIl0sIm5hbWVzIjpbIm5vb3AiLCJ2YWx1ZSIsImRpc3BhdGNoIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJfIiwidCIsInRlc3QiLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJpbmRleE9mIiwic2xpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsInR5cGUiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsIm9uIiwidHlwZW5hbWUiLCJjYWxsYmFjayIsIlQiLCJnZXQiLCJzZXQiLCJjb3B5IiwiY2FsbCIsInRoYXQiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsImMiLCJjb25jYXQiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/dispatch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/d3-cloud/node_modules/d3-dispatch/src/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dispatch: () => (/* reexport safe */ _dispatch_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _dispatch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dispatch.js */ \"(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/dispatch.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZDMtY2xvdWQvbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXMtYW5hbHl0aWNzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9kMy1jbG91ZC9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2luZGV4LmpzP2YzM2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtkZWZhdWx0IGFzIGRpc3BhdGNofSBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuIl0sIm5hbWVzIjpbImRlZmF1bHQiLCJkaXNwYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-cloud/node_modules/d3-dispatch/src/index.js\n");

/***/ })

};
;